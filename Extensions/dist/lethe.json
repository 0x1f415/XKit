{"id":"lethe","script":"//* TITLE Lethe **//\n//* VERSION 1.0 REV A **//\n//* DESCRIPTION Forgets posts once they scroll off the screen. **//\n//* DEVELOPER hobinjk **//\n//* FRAME false **//\n//* BETA false **//\n\n\n/** Export Lethe */\nXKit.extensions.lethe = new Lethe();\n\nfunction Lethe() {\n  this.running = false;\n  this.scrollWaiting = false;\n  this.preferences = {};\n  //   'sep0': {\n  //     text: 'Options',\n  //     type: 'separator'\n  //   },\n  // };\n  //\n  this.handleScroll = this.handleScroll.bind(this);\n}\n\n/**\n * Run Lethe\n */\nLethe.prototype.run = function() {\n  this.running = true;\n  window.addEventListener('scroll', this.handleScroll, false);\n};\n\n/**\n * Handle a scroll event, throttling to once every 100ms\n */\nLethe.prototype.handleScroll = function() {\n  if (this.scrollWaiting) {\n    return;\n  }\n  this.scrollWaiting = true;\n  setTimeout(this.updatePosts.bind(this), 100);\n};\n\n/**\n * Update the list of tracked posts, removing ones that are above/outside the\n * viewport and adding ones that are inside or below the viewport.\n */\nLethe.prototype.updatePosts = function() {\n  this.scrollWaiting = false;\n\n  this.posts.nextSibling or whatever\n  for (var pb of document.querySelectorAll('.post_media')) { var rect = pb.getBoundingClientRect(); var newt = document.createElement('div'); newt.style.width = rect.width + 'px'; newt.style.height = rect.height + 'px'; pb.parentNode.replaceChild(newt, pb); }\n};\n\n/**\n * Hide a post, storing it for later\n * @param {DOMElement} post\n */\n\n\n/**\n * Destroy Lethe\n */\nLethe.prototype.destroy = function() {\n  if (!this.running) {\n    return;\n  }\n  this.running = false;\n  window.removeEventListener('scroll', this.handleScroll, false);\n};\n","title":"Lethe","description":"Forgets posts once they scroll off the screen.","developer":"hobinjk","version":"1.0 REV A","frame":"false","beta":"false","file":"found","server":"up","errors":false,"slow":"false"}